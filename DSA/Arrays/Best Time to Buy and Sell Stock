
Problem Explanation
Given an array prices where prices[i] is the price of a given stock on day i, you want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Function Explanation
Here is the function code for reference:
******
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int mini = prices[0];
        int profit = 0;
        for (int i = 1; i < prices.size(); i++) {
            int cost = prices[i] - mini;
            profit = max(profit, cost);
            mini = min(mini, prices[i]);
        }
        return profit;
    }
};
*******
Step-by-Step Explanation
Initialization:

int mini = prices[0];: Initialize mini with the first day's price. This variable keeps track of the minimum price encountered so far.
int profit = 0;: Initialize profit to 0. This variable keeps track of the maximum profit achieved so far.
Iterate through the prices:

for (int i = 1; i < prices.size(); i++) { ... }: Loop through the prices starting from the second day (index 1).
Calculate potential profit:

int cost = prices[i] - mini;: Calculate the potential profit if the stock were bought at the lowest price so far (mini) and sold on the current day (prices[i]).
Update maximum profit:

profit = max(profit, cost);: Update profit to the maximum of the current profit and the potential profit calculated (cost).
Update minimum price:

mini = min(mini, prices[i]);: Update mini to the minimum of the current mini and the price on the current day (prices[i]).
Return the result:

return profit;: After the loop ends, return the maximum profit found.

Example
Let's walk through a simple example:
vector<int> prices = {7, 1, 5, 3, 6, 4};


Initialize mini = 7 and profit = 0.
On day 2 (prices[1] = 1):
cost = 1 - 7 = -6 (no profit, ignore negative).
profit remains 0.
mini = min(7, 1) = 1.
On day 3 (prices[2] = 5):
cost = 5 - 1 = 4.
profit = max(0, 4) = 4.
mini remains 1.
On day 4 (prices[3] = 3):
cost = 3 - 1 = 2.
profit remains 4.
mini remains 1.
On day 5 (prices[4] = 6):
cost = 6 - 1 = 5.
profit = max(4, 5) = 5.
mini remains 1.
On day 6 (prices[5] = 4):
cost = 4 - 1 = 3.
profit remains 5.
mini remains 1.
So, the maximum profit is 5.

This algorithm runs in linear time 
ùëÇ
(
ùëõ
)
O(n) and ensures that you find the best day to buy and the best day to sell for maximum profit efficiently.
